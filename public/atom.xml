<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunshine23lin.github.io/"/>
  <updated>2019-08-16T08:14:41.075Z</updated>
  <id>https://sunshine23lin.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring装配Bean</title>
    <link href="https://sunshine23lin.github.io/2019/08/16/spring%E8%A3%85%E9%85%8DBean/"/>
    <id>https://sunshine23lin.github.io/2019/08/16/spring装配Bean/</id>
    <published>2019-08-16T03:00:49.000Z</published>
    <updated>2019-08-16T08:14:41.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring装配的可选方案"><a href="#Spring装配的可选方案" class="headerlink" title="Spring装配的可选方案"></a>Spring装配的可选方案</h3><p>Spring具有非常大的灵活性,提供三种主要的配置机制:</p><ul><li>在XML中进行显示配置</li><li>在java中进行显示配置</li><li>隐式的bean发现机制和自动装配</li></ul><blockquote><p>注：尽可能地使用自动配置的机制。显示配置越少越好。当你必须要显示配置bean的时候,推荐使用类型安全并且比XML更加强大的JavaConfig。</p></blockquote><h3 id="自动化装配bean"><a href="#自动化装配bean" class="headerlink" title="自动化装配bean"></a>自动化装配bean</h3><p>Spring从两个角度来自动化装配:</p><ul><li>组件扫描:Spring会自动发现应用上下文中所创建的bean</li><li>自动装配:Spring自动满足bean之间的依赖</li></ul><ol><li>创建可被发现的bean<br>例子:CD与CD播放器<br>程序清单1.1 CompactDisc接口在Java中定义了CD</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序清单1.2 带有@Component注解的CompactDisc实现类SetPeppers</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title = <span class="string">"Sgt. Pepper's Lonely Hearts Club Band"</span>;</span><br><span class="line">    <span class="keyword">private</span> String artist = <span class="string">"The Beatles"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Playing"</span> +title+<span class="string">"by"</span> +artist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Componet注解，表面该类会做为组件类,并告知Spring要为这个类创建bean。组件扫描默认是不启用的。我们还需要显示配置一下Spring,从而命令它去寻找带有@Componet注解的类,并起创建bean。</p></blockquote><p>程序清单1.3 @ComponentScan注解启用了组件扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDplayerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有其它配置的话,@ComponentScan默认会扫描与配置相同的包</span></span><br></pre></td></tr></table></figure><p>程序清单1.4 通过XML启用组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>为组件扫描的bean命名<br>Spring应用上下中所有的bean都会给定一个ID。如果我们没有设置,但Spring会根据类名为其指定一个ID,将类名的第一个字母变为小写。</li></ol><p>如果要为这个bean设置不同的ID,可以将ID作为值传递给@Component注解</p><blockquote><p>@Component(“”)</p></blockquote><p>另外一种为Bean命名方式,不使用@Component注解,而是使用java依赖注入规范中所提供的@Named注解来为bean设置ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Named</span>(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDics</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>设置组件扫描的基础包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** 第一种默认扫描当前的类包</span></span><br><span class="line"><span class="comment">    <span class="doctag">@ComponentScan</span>("") </span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">    第二种扫描不同的基础配置包</span></span><br><span class="line"><span class="comment">    <span class="doctag">@ComponentScan</span>(basePackages=&#123;"",""&#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span>/</span><br></pre></td></tr></table></figure><ol start="4"><li>通过为bean添加注解实现自动装配<br>自动装配就是让Spring自动满足bean依赖的一种方法,在满足依赖的过程中会在Spring应用上下文中寻找匹配某个bean需求的其它bean。为了声明要进行自动装配,可以借助Spring的@Autowired注解</li></ol><p>程序清单4.1 通过自动配置,将一个CompactDisc注入到CDPlayer之中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span> <span class="keyword">implements</span>  <span class="title">MediaPlay</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> CompactDisc cd ;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">CDPlayer</span><span class="params">(CompactDisc cd )</span></span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.cd = cd ;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         cd.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Autowired不仅可以在构造函数,还可以用在类的任何方法上</p></blockquote><p>注意：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span>(required=<span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CDPlayer</span><span class="params">(CompactDisc cd)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cd = cd ;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有匹配的bean,那么在应用上下文创建的时候,Spring会抛出一个异常。为了避免异常的出现，可以将@Autowired的required属性设置为false、</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将request属性设置为false时,Spring会尝试执行自动装配,但是如果没有匹配的bean的话,Spring将会让这个bean处于未装配的状态。如果代码没有进行null检查的话,这个处于未装配状态的属性有可能会出现NullPointerException</span></span><br></pre></td></tr></table></figure><blockquote><p>@Inject注解来源于java依赖注入规范,该规范同时还为我们定义了@Named注解。在自动装配中，Spring同时支持@Inject和@Autowired。尽管@Inject和@Autowird之间有一个细微的差别,但是在大多数场合下,他们是可以相互替换的.</p></blockquote><h3 id="通过java代码装配bean"><a href="#通过java代码装配bean" class="headerlink" title="通过java代码装配bean"></a>通过java代码装配bean</h3><ol><li>创建配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDplayerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Configuration表面这个类是一个配置类</span></span><br></pre></td></tr></table></figure><ol start="2"><li>声明简单的bean<br>要在JavaConfig中声明bean,我们需要编写一个方法,这个方法会创建所需要类型的实例,然后给这个方法添加@Bean注解</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public CompactDisc sgtPeppers()&#123;</span><br><span class="line">     return new SgtPeppers();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>借助JavaConfig实现注入<br>在JavaConfig中装配bean最简单方式就是引用创建bean的方法,例如,在下面就是一种声明CDPlayer的可行方案:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public CDPlayer cdPlayer()&#123;</span><br><span class="line"></span><br><span class="line">      return new CDPlayer(sgtPeppers());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过XML装配bean"><a href="#通过XML装配bean" class="headerlink" title="通过XML装配bean"></a>通过XML装配bean</h3><ol><li><p>声明一个简单的<bean></bean></p><blockquote><bean id class></bean></blockquote></li><li><p>借助构造器注入<br>在XML中声明DI时,会有很多种可选的配置方案和风格。具体到构造器注入,有两种基本的配置方案可供选择:</p></li></ol><ul><li><constructor-arg>元素</constructor-arg></li><li>使用Spring3.0所引入的c-命名空间</li></ul><p>例子: 将声明了SgtPeppers bean，并实现了CompactDisc接口注入到CDPlayer。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 当Spring遇到这个<span class="tag">&lt;<span class="name">bean</span>&gt;</span>元素时,它会创建一个CDPlayer实例。<span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">元素会告知Spring要将一个ID为compactDisc的bean引用传递到CDPlayer的构造器</span><br></pre></td></tr></table></figure><p>在c-命名空间和模式声明之后,</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span></span></span><br><span class="line"><span class="tag"><span class="attr">c:cd-ref</span>=<span class="string">"compactDics"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="//sunshine23lin.github.io/2019/08/16/spring装配Bean/1.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring装配的可选方案&quot;&gt;&lt;a href=&quot;#Spring装配的可选方案&quot; class=&quot;headerlink&quot; title=&quot;Spring装配的可选方案&quot;&gt;&lt;/a&gt;Spring装配的可选方案&lt;/h3&gt;&lt;p&gt;Spring具有非常大的灵活性,提供三种主要的配置机
      
    
    </summary>
    
      <category term="Spring" scheme="https://sunshine23lin.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot之国际化</title>
    <link href="https://sunshine23lin.github.io/2019/08/13/springboot-3/"/>
    <id>https://sunshine23lin.github.io/2019/08/13/springboot-3/</id>
    <published>2019-08-13T07:05:49.000Z</published>
    <updated>2019-08-13T07:49:15.252Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、springboot之国际化"><a href="#一、springboot之国际化" class="headerlink" title="一、springboot之国际化"></a>一、springboot之国际化</h3><h4 id="编写国际化的步骤"><a href="#编写国际化的步骤" class="headerlink" title="编写国际化的步骤"></a>编写国际化的步骤</h4><ol><li><p>编写配置文件<br><img src="//sunshine23lin.github.io/2019/08/13/springboot-3/1.png" alt></p></li><li><p>设置项目的配置<br><img src="//sunshine23lin.github.io/2019/08/13/springboot-3/2.png" alt></p></li><li><p>springboot自动配置好了管理国际化资源文件的组件（在配置文件修改）</p><blockquote><p>spring.messages.basename=i18n.login</p></blockquote></li><li><p>去页面获取国际的值</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/asserts/css/signin.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/user/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--判断--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span>  <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>  <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>  <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.btn&#125;"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index.html(l='zh_CN')&#125;"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index.html(l='en_US')&#125;"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>效果：根据浏览器语言设置的信息切换了国际化；</p></blockquote><p>原来:</p><blockquote><p>国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Bean </span><br><span class="line">@ConditionalOnMissingBean </span><br><span class="line">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span><br><span class="line">public LocaleResolver localeResolver() &#123; </span><br><span class="line">         if (this.mvcProperties .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123; </span><br><span class="line">               return new FixedLocaleResolver(this.mvcProperties.getLocale()); </span><br><span class="line">             &#125;</span><br><span class="line">        AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver()localeResolver.setDefaultLocale(this.mvcProperties.getLocale()); </span><br><span class="line">           return localeResolver; </span><br><span class="line">      &#125; </span><br><span class="line">// 默认的就是根据请求头带来的区域信息获取Locale进行国际化</span><br></pre></td></tr></table></figure><h4 id="点击链接切换国际化"><a href="#点击链接切换国际化" class="headerlink" title="点击链接切换国际化"></a>点击链接切换国际化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String l = request.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] split = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="//sunshine23lin.github.io/2019/08/13/springboot-3/3.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、springboot之国际化&quot;&gt;&lt;a href=&quot;#一、springboot之国际化&quot; class=&quot;headerlink&quot; title=&quot;一、springboot之国际化&quot;&gt;&lt;/a&gt;一、springboot之国际化&lt;/h3&gt;&lt;h4 id=&quot;编写国际化的步骤&quot;
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://sunshine23lin.github.io/categories/SpringBoot/"/>
    
    
      <category term="Java后端" scheme="https://sunshine23lin.github.io/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Springboot&quot;配置文件&quot;</title>
    <link href="https://sunshine23lin.github.io/2019/08/07/springboot-2/"/>
    <id>https://sunshine23lin.github.io/2019/08/07/springboot-2/</id>
    <published>2019-08-07T06:41:03.000Z</published>
    <updated>2019-08-08T09:54:20.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、配置文件"><a href="#一、配置文件" class="headerlink" title="一、配置文件"></a>一、配置文件</h3><p>SpringBoot使用一个全局的配置文件,配置文件名是固定的;</p><ul><li>application.properties</li><li>application.yml</li></ul><p>配置文件的作用:</p><blockquote><p>修改SpringBoot自动配置的默认值;SpringBoot在底层都给我们自动配置好</p></blockquote><p>YAML: 以数据为中心,比json、xml等更适合做配置文件<br>YAML: 配置例子</p><blockquote><p>server:<br>  port: 8081</p></blockquote><p>XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1、YAML语法<br>YAML语法：</p><ol><li>基本语法<br>K: (空格) V:表示一对键值对(空格必须有)<br>以空格的缩进来控制层级关系;只要是左对齐的一列数据,都是同一个层级</li></ol><blockquote><p>server:<br>    port: 8081<br>    path: /hello</p></blockquote><ol start="2"><li>值的写法<br>K:v:字面直接来写<br>字符串默认不用加上单引号或者双引号<br>“”:双引号；不会转义字符串里面的特殊字符;特殊字符会作为本身想表示的意思<br>‘’:单引号;会转义特殊字符,特殊字符最终只是一个普通的字符串数据</li></ol><p>对象、Map(属性和值)(键值对)</p><blockquote><p>fridends:<br>         lastName: zhangsan<br>         age: 20</p></blockquote><p>行内写法</p><blockquote><p>friends: {lastName: zhangsan,age: 18}</p></blockquote><p>2、 配置文件值注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line">    lastName: hello</span><br><span class="line">    age: 18</span><br><span class="line">    boss: false</span><br><span class="line">    birth: 2017/12/12</span><br><span class="line">    maps: &#123;k1: v1,k2 : 12&#125;</span><br><span class="line">    lists:</span><br><span class="line">      - lisi</span><br><span class="line">      - zhaoliu</span><br><span class="line">    dog:</span><br><span class="line">      name: 小狗</span><br><span class="line">      age: 12</span><br></pre></td></tr></table></figure><p>person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中 * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定； </span></span><br><span class="line"><span class="comment"> * * prefix = "person"：配置文件中哪个下面的所有属性进行一一映射 </span></span><br><span class="line"><span class="comment"> * ** 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boos;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p>3、配置文件站位符<br>占位符获取之前配置的值,如果没有可以是用:指定默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person.last‐name=张三$&#123;random.uuid&#125; </span><br><span class="line">person.age=$&#123;random.int&#125; </span><br><span class="line">person.birth=2017/12/15</span><br><span class="line">person.boss=false </span><br><span class="line">person.maps.k1=v1 </span><br><span class="line">person.maps.k2=14 </span><br><span class="line">person.lists=a,b,c </span><br><span class="line">person.dog.name=$&#123;person.hello:hello&#125;_dog </span><br><span class="line">person.dog.age=15</span><br></pre></td></tr></table></figure><p>4、Profile</p><ol><li>多Profile文件<blockquote><p>我们在主配置文件编写的时候,文件名可以是application-{profile}.properties/yml<br>默认使用application.properties的配置</p></blockquote></li><li>yml支持多文档块方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">spring:</span><br><span class="line">  profiles: dev</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line">spring:</span><br><span class="line">  profiles: prod</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><p>5、激活指定profile</p><ol><li><p>在配置文件中指定spring.profile.active=dev</p></li><li><p>命令行:</p><blockquote><p>java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p></blockquote></li><li><p>虚拟机参数</p><blockquote><p>-Dspring.profiles.active=dev</p></blockquote></li></ol><p>6、配置文件加载位置<br>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Springboot的默认配置文件<br>-file:./config/<br>–file:./<br>-classpath:/config/<br>-classpath:/<br>优先级由高到底,高优先级的配置会覆盖低优先级的配置<br>SpringBoot会从这四个位置全部加载主配置文件;互补配置</p><p>spring.config.location来改变默认的配置文件位置<br>项目打包好以后,我们可以使用命令行参数的形式,启动项目的时候来指定配置文件的新位置;<br>指定配置文件和默认加载这些配置文件共同起作用形成互补配置</p><blockquote><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p></blockquote><p>7、自动配置原理</p><ol><li>自动配置原理:<br>1) SpringBoot启动的时候加载主配置类,开启了自动配置功能@EnableAutoConfiguration<br>2) @EnableAutoConfiguration作用:</li></ol><ul><li>利用EnableAutoConfiguationImportSelector给容器中导入一些组件</li><li>可以查看selectImports()方法的内容;</li><li>List configurations = getCandidateConfigurations(annotationMetadata, attributes);获取候选的配置</li></ul><blockquote><p>SpringFactoriesLoader.loadFactoryNames() 扫描所有jar包类路径下 META‐INF/spring.factories 把扫描到的这些文件的内容包装成properties对象 从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器 中</p></blockquote><p>精髓:</p><blockquote><p>1)、SpringBoot启动会加载大量的自动配置类<br>2)、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类<br>3)、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）<br>4)、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这 些属性的值；</p></blockquote><ol start="2"><li>细节<blockquote><p>@Conditional派生注解（Spring注解版原生的@Conditional作用）</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、配置文件&quot;&gt;&lt;a href=&quot;#一、配置文件&quot; class=&quot;headerlink&quot; title=&quot;一、配置文件&quot;&gt;&lt;/a&gt;一、配置文件&lt;/h3&gt;&lt;p&gt;SpringBoot使用一个全局的配置文件,配置文件名是固定的;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;applicat
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://sunshine23lin.github.io/categories/SpringBoot/"/>
    
    
      <category term="Java后端" scheme="https://sunshine23lin.github.io/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>netty-&quot;Protobuf&quot;</title>
    <link href="https://sunshine23lin.github.io/2019/08/02/netty-3/"/>
    <id>https://sunshine23lin.github.io/2019/08/02/netty-3/</id>
    <published>2019-08-02T10:06:32.000Z</published>
    <updated>2019-08-07T03:27:18.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、protobuf简单入门"><a href="#一、protobuf简单入门" class="headerlink" title="一、protobuf简单入门"></a>一、protobuf简单入门</h2><ol><li><p>简介</p><blockquote><p>它是一种轻便高效的数据格式,平台无关、语言无关、可扩展、可用于通讯协议和数据存储等领域</p></blockquote></li><li><p>优点</p></li></ol><ul><li>平台无关，语言无关，可扩展</li><li>提供了友好的动态库，使用简单；</li><li>解析速度快，比对应的XML快约20-100倍；</li><li>序列化数据非常简洁、紧凑，与XML相比，其序列化之后的数据量约为1/3到1/10。</li></ul><ol start="3"><li>简单例子</li></ol><p>pom内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写Student.proto</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">syntax= &quot;proto2&quot;;</span><br><span class="line">//使用方式：gradle generateProto (不能再用以前那种方式，因为那个只会生成message，不会生成service)</span><br><span class="line">//这个就相当于 在 右边gradle的other中的插件generateProto，使用后生成的代码放在build/generated中</span><br><span class="line">//生成完代码记得拷贝到java目录中</span><br><span class="line">package com.protobuf.proto;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">option optimize_for = SPEED;//加快解析速度，详细可以去官网查加快解析速度，不写默认是这个</span><br><span class="line">option java_package=&quot;com.tongda.protobuf&quot;;</span><br><span class="line">option java_outer_classname=&quot;StudentInfo&quot;;</span><br><span class="line"></span><br><span class="line">message Student&#123;</span><br><span class="line">    required string name=1;</span><br><span class="line">    optional int32 id=2;</span><br><span class="line">    optional string address=3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行命令</p><blockquote><p>protoc.exe –java_out</p></blockquote><ol start="4"><li>测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="keyword">import</span> com.google.protobuf.InvalidProtocolBufferException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtoBufTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvalidProtocolBufferException </span>&#123;</span><br><span class="line">        StudentInfo.Student student = StudentInfo.Student.newBuilder()</span><br><span class="line">                .setName(<span class="string">"张三"</span>)</span><br><span class="line">                .setId(<span class="number">12121</span>)</span><br><span class="line">                .setAddress(<span class="string">"潮州"</span>).build();</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">byte</span>[]  studnet2ByteArray = student.toByteArray();</span><br><span class="line">                  StudentInfo.Student student1 = StudentInfo.Student.parseFrom(studnet2ByteArray);</span><br><span class="line">                  System.out.println(student1.getName());</span><br><span class="line">                  System.out.println(student1.getAddress());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、protobuf简单入门&quot;&gt;&lt;a href=&quot;#一、protobuf简单入门&quot; class=&quot;headerlink&quot; title=&quot;一、protobuf简单入门&quot;&gt;&lt;/a&gt;一、protobuf简单入门&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;简介&lt;/p&gt;
&lt;block
      
    
    </summary>
    
      <category term="Netty" scheme="https://sunshine23lin.github.io/categories/Netty/"/>
    
    
  </entry>
  
  <entry>
    <title>socket初步认识</title>
    <link href="https://sunshine23lin.github.io/2019/08/02/socket-1/"/>
    <id>https://sunshine23lin.github.io/2019/08/02/socket-1/</id>
    <published>2019-08-02T06:51:57.000Z</published>
    <updated>2019-08-02T07:50:46.650Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ol><li>网络基础<br>两台计算如何进行通信<blockquote><p>IP:端口  &lt;–&gt; IP:端口</p></blockquote></li></ol><p><img src="//sunshine23lin.github.io/2019/08/02/socket-1/1.png" alt></p><ol start="2"><li><p>TCP/IP协议</p><blockquote><p>a.TCP/IP是世界上应用最为广泛的协议,是以TCP和IP为基础的不同层次上多个协议的集合<br>也称为：TCP/IP协议族 或 TCP/IP协议栈<br>TCP: Transmission Control Protocol 传输控制协议<br>IP: Internet Protocol 互联网协议</p></blockquote></li><li><p>TCP/IP模型<br><img src="//sunshine23lin.github.io/2019/08/02/socket-1/2.png" alt></p></li><li><p>端口</p><blockquote><p>a.用于区分不同应用程序<br>b.端口号范围为0<del>65535,其中0</del>1023为系统所保留<br>c.Ip地址和端口号组成了所谓的Socket，Socket是网络上运行的程序之间双向通信链路的终结点,是TCP和UDP的基础。<br>http:80  ftp:21 telnet:23</p></blockquote></li><li><p>TCP详解</p><blockquote><p>转载 <a href="https://blog.csdn.net/sinat_36629696/article/details/80740678" target="_blank" rel="noopener">https://blog.csdn.net/sinat_36629696/article/details/80740678</a></p></blockquote></li><li><p>UPD协议</p><blockquote><p>转载 <a href="https://blog.csdn.net/china_jeffery/article/details/78923428" target="_blank" rel="noopener">https://blog.csdn.net/china_jeffery/article/details/78923428</a></p></blockquote></li></ol><h3 id="一、Socket初步认识"><a href="#一、Socket初步认识" class="headerlink" title="一、Socket初步认识"></a>一、Socket初步认识</h3><ol><li>什么是Socket编程<blockquote><p>Socket是应用层与TCP/IP协议族通信的中间抽象层,它是一组接口。在设计模式中,Socket其实就是一个门面模式,它把复杂的TCP/IP协议族隐藏在Socket接口后面,对于用户来说,一组简单的接口就是全部让Socket去组织数据,以符合指定的协议。<br>例子：你要打电话给一个朋友，先拨号，朋友听到电话铃声后提起电话，这时你和你的朋友就建立起了连接，就可以讲话了。等交流结束，挂断电话结束此次交谈。 生活中的场景就解释了这工作原理</p></blockquote></li></ol><p><img src="//sunshine23lin.github.io/2019/08/02/socket-1/3.png" alt><br>2. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;网络基础&lt;br&gt;两台计算如何进行通信&lt;blockquote&gt;
&lt;p&gt;IP:端口  &amp;lt;–&amp;gt; IP:端口&lt;/p&gt;
&lt;/b
      
    
    </summary>
    
      <category term="Scoket" scheme="https://sunshine23lin.github.io/categories/Scoket/"/>
    
    
  </entry>
  
  <entry>
    <title>netty-&quot;Hello World&quot;</title>
    <link href="https://sunshine23lin.github.io/2019/08/02/netty-2/"/>
    <id>https://sunshine23lin.github.io/2019/08/02/netty-2/</id>
    <published>2019-08-02T05:29:08.000Z</published>
    <updated>2019-08-02T05:58:04.583Z</updated>
    
    <content type="html"><![CDATA[<p>前期pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.8.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>TestServer</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServer</span></span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 事件循环组，就是死循环</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="comment">//仅仅接受连接，转给workerGroup，自己不做处理</span></span><br><span class="line">      EventLoopGroup bossGroup=<span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">      <span class="comment">//真正处理</span></span><br><span class="line">      EventLoopGroup workerGroup=<span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//很轻松的启动服务端代码</span></span><br><span class="line">            ServerBootstrap serverBootstrap=<span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            <span class="comment">//childHandler子处理器,传入一个初始化器参数TestServerInitializer（这里是自定义）</span></span><br><span class="line">            <span class="comment">//TestServerInitializer在channel被注册时，就会创建调用</span></span><br><span class="line">            serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).</span><br><span class="line">                    childHandler(<span class="keyword">new</span> TestServerInitializer());</span><br><span class="line">            <span class="comment">//绑定一个端口并且同步，生成一个ChannelFuture对象</span></span><br><span class="line">            ChannelFuture channelFuture=serverBootstrap.bind(<span class="number">8899</span>).sync();</span><br><span class="line">            <span class="comment">//对关闭的监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//循环组优雅关闭</span></span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>TestServerInitializer</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//这是一个回调的方法，在channel被注册时被调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//一个管道，里面有很多ChannelHandler，这些就像拦截器，可以做很多事</span></span><br><span class="line">        ChannelPipeline pipeline=ch.pipeline();</span><br><span class="line">        <span class="comment">//增加一个处理器，neet提供的.名字默认会给，但还是自己写一个比较好</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 注意这些new的对象都是多例的，每次new出来新的对象,因为每个连接的都是不同的用户</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//HttpServerCodec完成http编解码，可查源码</span></span><br><span class="line">        pipeline.addLast(<span class="string">"httpServerCodec"</span>,<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">//增加一个自己定义的处理器hander</span></span><br><span class="line">        pipeline.addLast(<span class="string">"testHttpServerHandler"</span>,<span class="keyword">new</span> TestHttpServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>TestHttpServerHandler</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承InboundHandler类,代表处理进入的请求,还有OutboundHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHttpServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">HttpObject</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// channelRead0读取客户请求,并返回响应方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, HttpObject msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 判断这个是不是httpRequest</span></span><br><span class="line"><span class="comment">//         if (msg instanceof HttpRequest) &#123;</span></span><br><span class="line">            <span class="comment">// 判断url是否请求了favicon.ico</span></span><br><span class="line">            System.out.println(msg.getClass());</span><br><span class="line">            AttributeKey&lt;String&gt; ATTRIBUTE_KEY_VIN = AttributeKey.valueOf(<span class="string">"VIN"</span>);</span><br><span class="line">            ctx.channel().attr(ATTRIBUTE_KEY_VIN).set(<span class="string">"aaavv00"</span>);</span><br><span class="line">            System.out.println(<span class="string">"VIM:"</span>+ctx.channel().attr(ATTRIBUTE_KEY_VIN).get());</span><br><span class="line">            System.out.println(ctx.channel().remoteAddress());</span><br><span class="line">            HttpRequest httpRequest= (HttpRequest) msg;</span><br><span class="line">            URI uri=<span class="keyword">new</span> URI(httpRequest.uri());</span><br><span class="line">            <span class="comment">// 判断url是否请求了favicon.ico</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"/favicon.ico"</span>.equals(uri.getPath()))&#123;</span><br><span class="line">                System.out.println(<span class="string">"请求了favicon.ico"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 上面这段代码是验证如果用浏览器访问</span></span><br><span class="line"><span class="comment">             * 浏览器发起了两次请求,一个是发起的端口,第二是请求favicon.ico图标</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 代表响应返回的数据</span></span><br><span class="line">            ByteBuf context = Unpooled.copiedBuffer(<span class="string">"Hello World"</span>, CharsetUtil.UTF_8);</span><br><span class="line">            <span class="comment">//构造一个http响应,HttpVersion.HTTP_1_1:采用http1.1协议，HttpResponseStatus.OK：状态码200</span></span><br><span class="line">            FullHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, context);</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_TYPE, <span class="string">"test/plain"</span>);</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, context.readableBytes());</span><br><span class="line">            <span class="comment">// 如果只是调用write方法,他仅仅在存在缓冲区,并不会返回客户端</span></span><br><span class="line">           <span class="comment">// ctx =null;</span></span><br><span class="line">            ctx.writeAndFlush(response);</span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"handlerAdded"</span>);</span><br><span class="line">        <span class="keyword">super</span>.handlerAdded(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 管道被注册</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRegistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channelRegistered"</span>);</span><br><span class="line">        <span class="keyword">super</span>.channelRegistered(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当建立连接之后调用此方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channelActive"</span>);</span><br><span class="line">        <span class="keyword">super</span>.channelActive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 断开连接调用此方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channelInactive"</span>);</span><br><span class="line">        <span class="keyword">super</span>.channelInactive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelUnregistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channelUnregistered"</span>);</span><br><span class="line">        <span class="keyword">super</span>.channelUnregistered(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当发送异常的时候调用此方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.channelActive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前期pom文件&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
      <category term="Netty" scheme="https://sunshine23lin.github.io/categories/Netty/"/>
    
    
  </entry>
  
  <entry>
    <title>netty初步认识</title>
    <link href="https://sunshine23lin.github.io/2019/07/04/netty-1/"/>
    <id>https://sunshine23lin.github.io/2019/07/04/netty-1/</id>
    <published>2019-07-04T08:27:08.000Z</published>
    <updated>2019-08-02T03:51:42.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、netty的简介"><a href="#一、netty的简介" class="headerlink" title="一、netty的简介"></a>一、netty的简介</h2><ol><li><p>什么是Netty</p><blockquote><p>Netty是一个利用java的高级网络的能力,隐藏其背后的复杂性而提供一个易于使用的API的客户端/服务器框架。</p></blockquote></li><li><p>Netty构成部分<br>Channel</p><blockquote><p>Channel是NIO基本结构,他代表一个用于连接到实体如硬件设备、文件、网络套接字或程序组件,能够执行一个或者多个不同的I/O操作的开发连接。<br>把Channel想象成一个可以”打开”或者”关闭”,”连接”或”断开”和作为传入和传出数据的运输。</p></blockquote></li></ol><p>Callback (回调)</p><blockquote><p>callback (回调)是一个简单的方法,提供给另一种方法作为引用,这样后者就可以在某个合适的 时间调用前者。这种技术被广泛使用在各种编程的情况下,最常见的方法之一通知给其他人操 作已完成。</p></blockquote><p>Future</p><blockquote><p>Future 提供了另外一种通知应用操作已经完成的方式。这个对象作为一个异步操作结果的占 位符,它将在将来的某个时候完成并提供结果。</p></blockquote><p>Event和Handler</p><blockquote><p>Netty使用不同的事件来通知我们更改的状态和操作的状态。这使我们能够根据发送的事件触发适当的行为。<br>这些行为可能包括:</p><ul><li>日志</li><li>数据转换</li><li>流控制</li><li>应用程序逻辑</li></ul></blockquote><p>由于Netty是一个网络框架,事件很清晰的跟入站或或出站数据流相关。因为一些事件可能触发传入的数据或状态的变化包括：</p><ul><li>活动或者非活动连接</li><li>数据的读取</li><li>用户事件</li><li>错误</li></ul><p>出站事件是由于在未来操作将触发一个动作。这些包括:</p><ul><li>打开或关闭一个连接到远程</li><li>写或冲刷数据到socket</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、netty的简介&quot;&gt;&lt;a href=&quot;#一、netty的简介&quot; class=&quot;headerlink&quot; title=&quot;一、netty的简介&quot;&gt;&lt;/a&gt;一、netty的简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;什么是Netty&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Netty" scheme="https://sunshine23lin.github.io/categories/Netty/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot入门</title>
    <link href="https://sunshine23lin.github.io/2019/06/14/SpringBoot%E5%85%A5%E9%97%A8/"/>
    <id>https://sunshine23lin.github.io/2019/06/14/SpringBoot入门/</id>
    <published>2019-06-14T02:06:33.000Z</published>
    <updated>2019-08-02T06:56:58.147Z</updated>
    
    <content type="html"><![CDATA[<p>#一、SpringBoot第一个入门案例</p><ol><li>创建项目<blockquote><p>菜单 -&gt; New -&gt; Project -&gt; Spring Initializr 然后点 Next</p></blockquote></li></ol><p><img src="//sunshine23lin.github.io/2019/06/14/SpringBoot入门/1.png" alt></p><p>2.项目参数</p><blockquote><p>输入如图所示的两个地方的参数，其他参数不用修改，然后Next</p></blockquote><p><img src="//sunshine23lin.github.io/2019/06/14/SpringBoot入门/2.png" alt></p><p>3.选择Web模块</p><blockquote><p>接着左边选择 Web, 右边只勾选 Web 即可，然后点击Next</p></blockquote><p><img src="//sunshine23lin.github.io/2019/06/14/SpringBoot入门/3.png" alt></p><p>4.SpringbootApplication.java</p><blockquote><p>项目创建好之后，就自带一个SpringbootApplication, 其被@SpringBootApplication 所标记，表示这个是一个Springboot 应用</p></blockquote><p><img src="//sunshine23lin.github.io/2019/06/14/SpringBoot入门/4.png" alt></p><p>5.HelloController.java</p><blockquote><p>新建包 com.how2java.springboot.web， 然后在其下新建类HelloController.<br>这个类就是Spring MVC里的一个普通的控制器。<br>@RestController 是spring4里的新注解，是@ResponseBody和@Controller的缩写。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.springboot.web;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Spring Boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.运行并测试</p><blockquote><p>接下来就运行 SpringbootApplication.java， 然后访问地址<br><a href="http://127.0.0.1:8080/hello" target="_blank" rel="noopener">http://127.0.0.1:8080/hello</a></p></blockquote><p><img src="//sunshine23lin.github.io/2019/06/14/SpringBoot入门/5.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#一、SpringBoot第一个入门案例&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建项目&lt;blockquote&gt;
&lt;p&gt;菜单 -&amp;gt; New -&amp;gt; Project -&amp;gt; Spring Initializr 然后点 Next&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://sunshine23lin.github.io/categories/SpringBoot/"/>
    
    
      <category term="Java后端" scheme="https://sunshine23lin.github.io/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>spring依赖注入</title>
    <link href="https://sunshine23lin.github.io/2019/06/10/spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>https://sunshine23lin.github.io/2019/06/10/spring依赖注入/</id>
    <published>2019-06-10T00:58:30.000Z</published>
    <updated>2019-06-10T05:45:34.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Spring的依赖注入概述"><a href="#一、Spring的依赖注入概述" class="headerlink" title="一、Spring的依赖注入概述"></a>一、Spring的依赖注入概述</h1><ol><li><p>注入的方式:只有3种</p><blockquote><p>第一种方式:通过构造函数<br>第二种方法:通过set方法</p></blockquote></li><li><p>注入内容:</p><blockquote><p>第一类:基本类型和String类型<br>第二类:其它的bean<br>第三类:复杂类型(集合类型)</p></blockquote></li></ol><h1 id="二、依赖注入方式-xml"><a href="#二、依赖注入方式-xml" class="headerlink" title="二、依赖注入方式-xml"></a>二、依赖注入方式-xml</h1><ol><li><p>构造函数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   涉及的标签:</span></span><br><span class="line"><span class="comment">   constructor-arg</span></span><br><span class="line"><span class="comment">   该标签是写在bean标签内部发子标</span></span><br><span class="line"><span class="comment">   标签的属性:</span></span><br><span class="line"><span class="comment">       type:指定要注入的参数在构造函数中类型</span></span><br><span class="line"><span class="comment">       index:指定要注入的参数在构造函数的索引位置</span></span><br><span class="line"><span class="comment">       name: 指定参数在构造函数的中的名称</span></span><br><span class="line"><span class="comment">       value:指定注入的数据内容,他只能指定基本类型数据和String类型数据</span></span><br><span class="line"><span class="comment">       ref:指定其他bean类型数据。写的其它bean的id</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.mydata.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"莫斯特"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>              </span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">value</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Data"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Set方法注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    涉及的标签:property</span></span><br><span class="line"><span class="comment">    标签的属性:</span></span><br><span class="line"><span class="comment">         name:指定的是set方法的名称。匹配的是类中set后面的部分</span></span><br><span class="line"><span class="comment">         value:指定注入的数据内容</span></span><br><span class="line"><span class="comment">         ref: 其它bean类型</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  &lt;bean id="accountService2" class="com.mydata.service.impl.AccountServiceImpl"&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="name" value="莫斯特"&gt;&lt;/property&gt;              </span></span><br><span class="line"><span class="comment">&lt;property name="age" value="18"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="birthday" value="now"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="三、依赖注入方法-注解"><a href="#三、依赖注入方法-注解" class="headerlink" title="三、依赖注入方法-注解"></a>三、依赖注入方法-注解</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">用于创建对象</span></span><br><span class="line"><span class="comment">@Componet:</span></span><br><span class="line"><span class="comment">      作用:就相当于spring的xml配置文件中写了一个bean标签</span></span><br><span class="line"><span class="comment">      属性:</span></span><br><span class="line"><span class="comment">           value:用于指定bean的id。当不写时,默认值当前类名,首字母改小写</span></span><br><span class="line"><span class="comment">  由此注解衍生的三个注解:</span></span><br><span class="line"><span class="comment">     @Controller:一般用于表现层</span></span><br><span class="line"><span class="comment">     @Service：一般用于业务层</span></span><br><span class="line"><span class="comment">     @Repository:一般用于持久层</span></span><br><span class="line"><span class="comment">  他们的作用以及属性和@Compoent的作用是一模一一样。spring框架为我们提供更明确的语义来指定不同层</span></span><br><span class="line"><span class="comment">     @Autowired</span></span><br><span class="line"><span class="comment">     作用:自动按照类型注入。只要容器中有唯一的类型匹配,则可以直接注入成功。</span></span><br><span class="line"><span class="comment">     细节:当使用此注解注入时,set方法就可以省略了</span></span><br><span class="line"><span class="comment">     @Qualifier</span></span><br><span class="line"><span class="comment">     作用:在自动按照类型注入的基础上,再按照bean的id注入。在给类成员注入时,他不能够独立使用。</span></span><br><span class="line"><span class="comment">     属性:</span></span><br><span class="line"><span class="comment">         value:用于指定bean的id</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     @Resource</span></span><br><span class="line"><span class="comment">     作用:直接按照bean的id注入</span></span><br><span class="line"><span class="comment">     属性:</span></span><br><span class="line"><span class="comment">         name:用于指定bean的id</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     以上3个注解,都只能用于注入其他bean类型,而不能注入基本类型各String</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     @value</span></span><br><span class="line"><span class="comment">         作用:用于注入基本类型和String类型的数据。</span></span><br><span class="line"><span class="comment">         属性:</span></span><br><span class="line"><span class="comment">              value:用于指定要注入的数据。它支持使用Spring的el表达式。</span></span><br><span class="line"><span class="comment">              spring的el表达式写法:</span></span><br><span class="line"><span class="comment">                         $&#123;表达式&#125;</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     &lt;context:property-placeholder location="" /&gt;</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、Spring的依赖注入概述&quot;&gt;&lt;a href=&quot;#一、Spring的依赖注入概述&quot; class=&quot;headerlink&quot; title=&quot;一、Spring的依赖注入概述&quot;&gt;&lt;/a&gt;一、Spring的依赖注入概述&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;注入的方式:只有3
      
    
    </summary>
    
      <category term="Spring" scheme="https://sunshine23lin.github.io/categories/Spring/"/>
    
    
      <category term="Java后端" scheme="https://sunshine23lin.github.io/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>bean对象</title>
    <link href="https://sunshine23lin.github.io/2019/06/06/bean%E5%AF%B9%E8%B1%A1/"/>
    <id>https://sunshine23lin.github.io/2019/06/06/bean对象/</id>
    <published>2019-06-06T09:17:08.000Z</published>
    <updated>2019-06-10T00:40:10.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、bean对象的三种创建方式"><a href="#一、bean对象的三种创建方式" class="headerlink" title="一、bean对象的三种创建方式"></a>一、bean对象的三种创建方式</h1><ol><li>通过调用构造函数来创建bean对象(常用)<blockquote><p>在默认情况下,当我们在spring的配置文件中写了一个bean标签,并提供了class属性,spring会调用默认构造函数创建对象,如果没有默认构造函数，则对象创建失败</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">           System.out.println(<span class="string">"hello spring"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过静态工厂创建bean对象<blockquote><p>工厂类中提供了一个静态方法,可以返回要用到bean对象</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">StaticBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟一个获取bean对象的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HelloService <span class="title">getBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.通过实例创建bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">getBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>spring.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    xmlns 即 xml namespace xml 使用的命名空间</span></span><br><span class="line"><span class="comment">    xmlns:xsi 即 xml schema instance xml 遵守的具体规范</span></span><br><span class="line"><span class="comment">    xsi:schemaLocation 本文档 xml 遵守的规范 官方指定</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         属性：</span></span><br><span class="line"><span class="comment">              id:对象的唯一标识</span></span><br><span class="line"><span class="comment">              class:要创建对象的全限定类名</span></span><br><span class="line"><span class="comment">              factory-method:指定创建bean对象的方法,该方法可以是静态的,也可以部署、</span></span><br><span class="line"><span class="comment">              factory-bean : 指定创建bean对象的工厂bean的id</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         bean对象的三种创建方式</span></span><br><span class="line"><span class="comment">         第一种:通过调用构造函数来创建bean对象 常用</span></span><br><span class="line"><span class="comment">                在默认情况下,当我们在spring的配置文件中写了一个Bean标签,并提供了class属性,spring就会调用默认构造函数创建对象</span></span><br><span class="line"><span class="comment">                如果没有默认构造函数,则对象创建失败</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         第二种：通过静态工厂创建bean对象,工厂类中提供一个静态方法,可以返回要用到bean对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 默认构造函数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.myweb.spring.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态工厂创建 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"staticBeanFactory"</span> <span class="attr">class</span>=<span class="string">"com.myweb.spring.StaticBeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getBean"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 实例工厂创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"instanceBeanFactory"</span> <span class="attr">class</span>=<span class="string">"com.myweb.spring.InstanceBeanFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceHelloBeanFactory"</span> <span class="attr">factory-bean</span>=<span class="string">"instanceBeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getBean"</span>  &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二、bean对象的作用范围"><a href="#二、bean对象的作用范围" class="headerlink" title="二、bean对象的作用范围"></a>二、bean对象的作用范围</h1><blockquote><p>配置的属性:bean标签的scope属性<br>属性的取值:<br>     singleton:单例的。 默认<br>     prototype:多例<br>     request:请求范围<br>     session:会话范围<br>     global-session:全局会话 范围</p></blockquote><h1 id="三、bean对象的生命周期"><a href="#三、bean对象的生命周期" class="headerlink" title="三、bean对象的生命周期"></a>三、bean对象的生命周期</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、bean对象的三种创建方式&quot;&gt;&lt;a href=&quot;#一、bean对象的三种创建方式&quot; class=&quot;headerlink&quot; title=&quot;一、bean对象的三种创建方式&quot;&gt;&lt;/a&gt;一、bean对象的三种创建方式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;通过调用构造函数来创建b
      
    
    </summary>
    
      <category term="Spring" scheme="https://sunshine23lin.github.io/categories/Spring/"/>
    
    
      <category term="Java后端" scheme="https://sunshine23lin.github.io/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA创建Spring Maven 项目 - HelloWorld</title>
    <link href="https://sunshine23lin.github.io/2019/06/06/%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BAspring/"/>
    <id>https://sunshine23lin.github.io/2019/06/06/初步搭建spring/</id>
    <published>2019-06-06T03:11:25.000Z</published>
    <updated>2019-06-06T09:36:49.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建新项目"><a href="#一、创建新项目" class="headerlink" title="一、创建新项目"></a>一、创建新项目</h2><ul><li>创建一个新项目，Maven - Create from archetype，选中maven-archetype-webapp这个archetype</li></ul><p><img src="//sunshine23lin.github.io/2019/06/06/初步搭建spring/1.jpg" alt></p><ul><li>输入GroupId和ArtifactId</li></ul><p><img src="//sunshine23lin.github.io/2019/06/06/初步搭建spring/2.jpg" alt></p><ul><li>输入项目名称并选择项目存放的路径</li></ul><p><img src="//sunshine23lin.github.io/2019/06/06/初步搭建spring/3.jpg" alt></p><h2 id="二、引入Spring"><a href="#二、引入Spring" class="headerlink" title="二、引入Spring"></a>二、引入Spring</h2><ul><li>打开pom.xml，引入Spring</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- spring框架核心--&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.3.9.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--spring test--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ul><li>编写 bean<br><img src="//sunshine23lin.github.io/2019/06/06/初步搭建spring/4.jpg" alt></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.shsxt.service;</span><br><span class="line"></span><br><span class="line">public class HelloService &#123;</span><br><span class="line">    public void hello()&#123;</span><br><span class="line">        System.out.println(&quot;hello spring&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>spring 配置文件的编写<br>在 src 下新建 xml 文件，并拷贝官网文档提供的模板内容到 xml 中，配置bean 到 xml 中,把对应 bean 纳入到 spring 容器来管理<br><img src="//sunshine23lin.github.io/2019/06/06/初步搭建spring/5.jpg" alt></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">xmlns 即 xml namespace xml 使用的命名空间</span></span><br><span class="line"><span class="comment">xmlns:xsi 即 xml schema instance xml 遵守的具体规范</span></span><br><span class="line"><span class="comment">xsi:schemaLocation 本文档 xml 遵守的规范 官方指定</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.shsxt.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>验证 spring 框架环境是否搭建成功<br><img src="//sunshine23lin.github.io/2019/06/06/初步搭建spring/6.png" alt></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.shsxt.service;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class HelloServiceTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test1() throws Exception &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 1.加载Spring的配置文件</span><br><span class="line">         * 2.取出Bean容器中的实例</span><br><span class="line">         * 3.调用bean方法</span><br><span class="line">         */</span><br><span class="line">        // 1.加载Spring的配置文件</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);</span><br><span class="line">        // 2.取出Bean容器中的实例</span><br><span class="line">        HelloService helloService = (HelloService) context.getBean(&quot;helloService&quot;);</span><br><span class="line">        // 3.调用bean方法</span><br><span class="line">        helloService.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>验证结果</li></ul><p><img src="//sunshine23lin.github.io/2019/06/06/初步搭建spring/7.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、创建新项目&quot;&gt;&lt;a href=&quot;#一、创建新项目&quot; class=&quot;headerlink&quot; title=&quot;一、创建新项目&quot;&gt;&lt;/a&gt;一、创建新项目&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建一个新项目，Maven - Create from archetype，选中mave
      
    
    </summary>
    
      <category term="Spring" scheme="https://sunshine23lin.github.io/categories/Spring/"/>
    
    
      <category term="Java后端" scheme="https://sunshine23lin.github.io/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
</feed>
